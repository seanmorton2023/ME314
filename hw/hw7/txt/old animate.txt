  def animate_biped(q_array, L1=1, L2=1, w=0.2, T=10):
    """
    Function to generate web-based animation of biped with two legs.

    Parameters:
    ================================================
    q_array:
        trajectory of x, y, theta1, theta2
    L1:
        length of the first leg
    L2:
        length of the second leg
    T:
        length/seconds of animation duration

    Returns: None
    """

    ################################
    # Imports required for animation.
    from plotly.offline import init_notebook_mode, iplot
    from IPython.display import display, HTML
    import plotly.graph_objects as go

    #######################
    # Browser configuration.
    def configure_plotly_browser_state():
        import IPython
        display(IPython.core.display.HTML('''
            <script src="/static/components/requirejs/require.js"></script>
            <script>
              requirejs.config({
                paths: {
                  base: '/static/base',
                  plotly: 'https://cdn.plot.ly/plotly-1.5.1.min.js?noext',
                },
              });
            </script>
            '''))
    configure_plotly_browser_state()
    init_notebook_mode(connected=False)

    ###############################################
    # Getting data from pendulum angle trajectories.
    x_array      = q_array[0]
    y_array      = q_array[1]
    theta1_array = q_array[2]
    theta2_array = q_array[3]
    
    #this matrix contains vectors that correspond to the locations
    #of all 4 vertices of the leg rectangles in space. needs to be 
    #multiplied by the transf. mat. for the top of each leg to get world posns.
    vertices_mat_L1 = np.matrix([
        [-w/2, w/2, w/2, -w/2],
        [   0,   0, -L1,  -L1],
        [   0,   0,   0,    0],
        [   1,   1,   1,    1]
    ])
    
    vertices_mat_L2 = np.matrix([
        [-w/2, w/2, w/2, -w/2],
        [   0,   0, -L2,  -L2],
        [   0,   0,   0,    0],
        [   1,   1,   1,    1]
    ])
    
    
    N = len(q_array[0]) # Need this for specifying length of simulation

    ###############################################
    # Define arrays containing data for plotting
    posn_top_array     = np.zeros((2,N))
    posn_bottom1_array = np.zeros((2,N))
    posn_bottom2_array = np.zeros((2,N))  
    
    # Use homogeneous tranformation to transfer these two axes/points
    # back to the fixed frame

    for i in range(N): # iteration through each time step
        # evaluate homogeneous transformation
        
        #transformation matrices we need: Tsa, Tab, Tac, Tbd, Tce, 
        x      = x_array[i]
        y      = y_array[i]
        theta1 = theta1_array[i]
        theta2 = theta2_array[i]
        
        #------right leg------#
        Raa1 = np.matrix([
            [np.cos(theta1), -np.sin(theta1), 0],
            [np.sin(theta1),  np.cos(theta1), 0],
            [              0,                0, 1]
        ])

#         Rdf = np.matrix([
#             [np.cos(-theta1), -np.sin(-theta1), 0],
#             [np.sin(-theta1),  np.cos(-theta1), 0],
#             [              0,                0,   1]
#         ])

#         p_a1b = np.matrix([0, -L1/2, 0])
#         p_bd =  np.matrix([0, -L1/2, 0])

        Gaa1 = SOnAndRnToSEn(Raa1, [0,0,0]) 
    
#         Ga1b = SOnAndRnToSEn(np.eye(3), p_a1b)
#         Gbd  = SOnAndRnToSEn(np.eye(3),  p_bd) 
#         Gdf  = SOnAndRnToSEn(Rdf,  [0,0,0]) 

        #------left leg------#

        Raa2 = np.matrix([
            [np.cos(-theta2), -np.sin(-theta2), 0],
            [np.sin(-theta2),  np.cos(-theta2), 0],
            [              0,                0,   1]

        ])

#         Reg = np.matrix([
#             [np.cos(theta2), -np.sin(theta2), 0],
#             [np.sin(theta2),  np.cos(theta2), 0],
#             [              0,                0, 1]
#         ])

#         p_a2c = np.matrix([0, -L2/2, 0])
#         p_ce =  np.matrix([0, -L2/2, 0])

        Gaa2 = SOnAndRnToSEn(Raa2, [0,0,0])
#         Ga2c = SOnAndRnToSEn(np.eye(3), p_a2c)
#         Gce  = SOnAndRnToSEn(np.eye(3), p_ce)
#         Geg  = SOnAndRnToSEn(Reg, [0,0,0])

        #---------------------#

        #combine transformation matrices
        Gsa = SOnAndRnToSEn(np.eye(3),np.matrix([x,y,0]))
#         Gsb = Gsa @ Gaa1 @ Ga1b
#         Gsc = Gsa @ Gaa2 @ Ga2c
#         Gsd = Gsb @ Gbd
#         Gse = Gsc @ Gce
#         Gsf = Gsd @ Gdf
#         Gsg = Gse @ Geg

#         #define important positions in space. convert Numpy Matrices to 1D arrays; get 
#         #x and y elements from positions
#         posn_top      = Gsa @ np.matrix([0,0,0,1]).T.getA1()[0:2] #"bar" version of 3D posn    
#         posn_bottom1  = Gsg @ np.matrix([0,0,0,1]).T.getA1()[0:2]
#         posn_bottom2  = Gsf @ np.matrix([0,0,0,1]).T.getA1()[0:2]

        #add onto array
#         posn_top_array[:,i]     = posn_top
#         posn_bottom1_array[:,i] = posn_bottom1
#         posn_bottom2_array[:,i] = posn_bottom2

        vertices1 = Gsa @ Gaa2 @ vertices_mat_L1
        vertices1 = Gsa @ Gaa2 @ vertices_mat_L2
        
        print(vertices1)

        
    #all the stuff below here is for plotting; for now print out data we're planning to plot
    
    
    '''

    ####################################
    # Using these to specify axis limits.
    xm = np.min(x_array)-2*L1
    xM = np.max(x_array)+2*L1
    ym = np.min(y_array)-2*L1
    yM = np.max(y_array)+0.5

    ###########################
    # Defining data dictionary.
    # Trajectories are here.
    data=[
        # note that except for the trajectory (which you don't need this time),
        # you don't need to define entries other than "name". The items defined
        # in this list will be related to the items defined in the "frames" list
        # later in the same order. Therefore, these entries can be considered as 
        # labels for the components in each animation frame
        dict(name='Arm'),
        dict(name='Mass 1'),
        dict(name='Mass 2')
        ]

    ################################
    # Preparing simulation layout.
    # Title and axis ranges are here.
    layout=dict(autosize=False, width=1000, height=1000,
                xaxis=dict(range=[xm, xM], autorange=False, zeroline=False,dtick=1),
                yaxis=dict(range=[ym, yM], autorange=False, zeroline=False,scaleanchor = "x",dtick=1),
                title='Double Pendulum Simulation', 
                hovermode='closest',
                updatemenus= [{'type': 'buttons',
                               'buttons': [{'label': 'Play','method': 'animate',
                                            'args': [None, {'frame': {'duration': T, 'redraw': False}}]},
                                           {'args': [[None], {'frame': {'duration': T, 'redraw': False}, 'mode': 'immediate',
                                            'transition': {'duration': 0}}],'label': 'Pause','method': 'animate'}
                                          ]
                              }]
               )

    ########################################
    # Defining the frames of the simulation.
    # This is what draws the lines from
    # joint to joint of the pendulum.
    frames=[dict(data=[# first three objects correspond to the arms and two masses,
                       # same order as in the "data" variable defined above (thus 
                       # they will be labeled in the same order)
#                        dict(x=[0,xx1[k],xx2[k]], 
#                             y=[0,yy1[k],yy2[k]], 
#                             mode='lines',
#                             line=dict(color='orange', width=3),
#                             ),
#                        go.Scatter(
#                             x=[xx1[k]],
#                             y=[yy1[k]],
#                             mode="markers",
#                             marker=dict(color="blue", size=12)),
#                        go.Scatter(
#                             x=[xx2[k]],
#                             y=[yy2[k]],
#                             mode="markers",
#                             marker=dict(color="blue", size=12)),
        
        
                       dict(x=[0,xx1[k],xx2[k]], 
                            y=[0,yy1[k],yy2[k]], 
                            mode='lines',
                            line=dict(color='orange', width=3),
                            ),
                       go.Scatter(
                            x=[xx1[k]],
                            y=[yy1[k]],
                            mode="markers",
                            marker=dict(color="blue", size=12)),
                       go.Scatter(
                            x=[xx2[k]],
                            y=[yy2[k]],
                            mode="markers",
                            marker=dict(color="blue", size=12)),    
        
                                             
                      ]) for k in range(N)]

    #######################################
    # Putting it all together and plotting.
    figure1=dict(data=data, layout=layout, frames=frames)           
    iplot(figure1)
    
    '''